<div class="content  mt-6">
    <h1 class="has-text-centered j-title">Hello!</h1>
    <section class="j-text-body container section" id="abstract">
        I am Joe Langlands, a software developer based in sunny Manchester. Welcome to my website!
    </section>
    <hr class="j-content-divider"/>
    <section class="j-text-body container section">
        <p class="block">
            This website is mainly a place for me to play with new technologies and experiment with different ideas.
            I was drawn to the simplicity of htmx to write single page applications using standard html.
            I also wanted to try and build a website that can be compiled into a single binary and run on a server
            without any dependencies, including all of the images, css files and html templates using the
            <code class="j-inline-code">embed</code> package.
            And I didn't need to write <em>any</em> JavaScript at all!
        </p>    
        <p class="block">
            It must be noted though that design/creativity is not my strong point so excuse the rather bland look of
            this website! I get my inspiration from the websites of yesteryear with fun CSS transitions and HTML
            trickery along with their simplicity (and garish colour schemes). Having said that, this website does act
            as a modern day single page application. It is rather amusing to call some of the endpoints used to render
            the individual html components.
        </p>
        <p class="block">
            I'll probably add many wacky creations to this website like the carousel below that is permutated by the server. 
            If you load up two instances of this website, you should see the same sequence of images offset by the time
            difference between loading up both instances. It's not practical at all, but I thought it would be cool to use
            some goroutines, channels and dead simple htmx to make it work by managing some global application state on the server.
        </p>
    </section>
    {{ template "carousel" . }}
    <section class="j-text-body container section">
        <p class="block">
            I wanted to give building a router using Go's standard library <code class="j-inline-code">net/http</code> package a <em>go</em>,
            to learn how to build one and just generally have fun. Right now it is a simple wrapper around the <code class="j-inline-code">http.ServeMux</code>,
            to register paths by their http method.
            This website serves as a test bed.
            Who knows, this may become a separate project in the future! Although it must be said that there are many great Go
            based routers out there today,
            two of my favourite being <a class="j-link" href="https://github.com/go-chi/chi">chi</a> and <a
                class="j-link" href="https://github.com/julienschmidt/httprouter">julienschmidt/httprouter</a>.
        </p>
        <p class="block">
            What is this god awful colour scheme you ask? Well the palette is from the VSCode theme I use, which is a
            <em>very slightly</em> modified
            version of the 80's synthwave inspired masterpiece <a class="j-link"
                href="https://marketplace.visualstudio.com/items?itemName=VictoriaDrake.kabukicho">Kabukich≈ç</a>
            by Victoria Drake.
        </p>
    </section>
</div>